# /**
#  * Copyright 2021 Google LLC
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License");
#  * you may not use this file except in compliance with the License.
#  * You may obtain a copy of the License at
#  *
#  *      http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software
#  * distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.
#  */
main:
    params: [input]
    steps:
    - init:
        assign:
        - workflowScope: ''
    - Loop:
        for:
            value: eachValue  # outerLoopValue does not exist outside of outerLoop step
            in: ${input}
            steps:
            - invoke_backup:
                call: create_backup
                args:
                    parent: ${eachValue.parent}
                    backupId: ${eachValue.backupId}
                    database: ${eachValue.database}
                    expireTime: ${time.format(sys.now() + eachValue.expireTime)}
                result: backup_result
            - outerLoopAssign:
                assign:
                - workflowScope: ${backup_result}
    - returnOutput:
            return: ${workflowScope}

create_backup:
    params: [parent,backupId,database,expireTime]
    steps:
    - create:
        call: googleapis.spanner.v1.projects.instances.backups.create
        args:
            parent: ${parent}
            backupId: ${backupId}
            body:
                database: ${database}
                expireTime: ${expireTime}
        result: createResult
    # - check_backup_status:
    #     try:
    #       call: googleapis.spanner.v1.projects.instances.backups.operations.get
    #       args:
    #         name: ${createResult.name}
    #       result: api_response
    #     retry:
    #       predicate: ${custom_predicate}
    #       max_retries: 5
    #       backoff:
    #         initial_delay: 2
    #         max_delay: 60
    #         multiplier: 2
    - last_step:
        return: "OK"

custom_predicate:
  params: [e]
  steps:
    - what_to_repeat:
        switch:
          - condition: ${e.done}
            return: true
    - otherwise:
        return: false
